// Single Line comments

/*
Multi-
Line
comments
*/

/// Documentation comments
/// # Supports markdown
/// It's just like rust!!

// Import code from other files or clams in the project folder `dive { <functions/variables> } from "<file.zc>" or <clam>::<pearl>;`
dive { Colors } from "./colors.zc";
dive { print, println } from std::io;
dive { get_date } from "./time.zc";

// Import "unsafe" C libraries. `bellyflop {<functions/variables>...} from <library.h>;`
bellyflop { * } from <time.h>;

// This is a compile time macro. It will be run at compile time and the return value can be referenced by @macro_name.
dive get_datetime() -> string {
    current_time: time_t;
    current_time = time(Null);
    return ctime(&current_time).to_string();
}

// Constants should be all caps.
const DATE: string = @get_datetime();

// Enums
enum Test {
    test1, // 1
    test2, // 2
    test3, // 3
    test4, // 4
    // etc...
};

// Structs
struct Person {
    Name: string = "Unknown", // Will use "Unknown" if a value is not assigned. Same with others below
    Age: i32 = 0,
    Height: i32 = 0,
    Gender: f32, // The compiler will force the programmer to define a value for this on creation because a default value is not provided.
    SSN: string = "000-000-000-000-000",
}

// Main function plus arguements
fun main(args: Vec<string> /* or args: List<string> */) -> i32 {
    // use rust style print :
    print("{}", 10);

    // or use c-style print :
    print("%d", 10);

    // Double colon test, just for tokenization testing
    foo::bar();

    // Floats
    float32: f32 = 3.14;
    float64: f64 = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;

    // Variable declarations are as follows: `<name>: <type> = <value>;` i.e.
    debug: bool = true;

    // The compiler unwraps these lines to if statements:
    // ```zinc
    // if debug {
    //     println("Debug is on");
    // }
    // ```
    println("Debug is on") when debug; // This will only run this line when debug is true
    println("This will also work") if debug; // This will only run this line if debug is true

    // You can also do inline if conditionsl
    statement: string = "Not a funny number";
    x: i32 = 0;
    x = statement == "A funny number"? 69 : 42;

    // We can also do that with inline if
    x = 69 if statement == "A funny number";

    // This can also work with 'when'
    x = 42 when statement == "The meaning of life";

    // Define a new object `<name>: <object type> = {<values>...};`
    tallen: Person = {
        Name = "Tallen",
        Age = 17,
        Height = 200,
        Gender = 0.1,
        SSN = "102038877298347590827987689763",
    };

    println("The color is : {}.", Colors::Red);
    num: i32 = 8;
    str: string = "Hello, world!";
    change_val(str, "new value");

    // For loops `for <index value> in <range/list> {}`
    for i in [1..10] {
        print(i); // This will count from 1 to 10
    }

    // While loops `while <condition> {}`
    while condition == true {
        print("This will run until it's not true"); // This will run while the condition is true
    }

    // Do-while loops `do {} while <condition>;`
    do {
        print("Runs once, then does the while");
    } while condition == true;

    // Return values.
    return 0;
}

// '&' is a pointer (reference) to some piece of data
// '*' will dereference the pointer to get the actual data from the memory sector
// Function syntax `fun <function_name>(<arg name>: <arg type>...) -> <return type> {return <value with same type of return type>}`
fun change_val(str: &string, new_value: string) -> void {
    *str = new_value;
}

// Void functions still need to tell the compiler that they are void. The compiler will infer this, but it makes code more readable.
fun void_function() -> void {
    println("Hello, world!");
}

// Functions can return a type.
fun can_error(x: i32, y: i32) -> i32 {
    try {
        if y == 0 {
            throw Error::DivisionByZero;
        }
        z: i32 = x/y;
        return z;
    } catch (const e: Error) {
        println(e);
        return 0;
    }
}
